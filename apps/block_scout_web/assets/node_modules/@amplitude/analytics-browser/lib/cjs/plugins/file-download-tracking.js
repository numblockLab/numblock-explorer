var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileDownloadTracking = void 0;
var tslib_1 = require("tslib");
var analytics_types_1 = require("@amplitude/analytics-types");
var FILE_DOWNLOAD_EVENT = 'file_download';
var fileDownloadTracking = function () {
    var name = 'fileDownloadTracking';
    var type = analytics_types_1.PluginType.ENRICHMENT;
    var setup = function (config, amplitude) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var addFileDownloadListener, ext, links, observer;
        return tslib_1.__generator(this, function (_a) {
            /* istanbul ignore if */
            if (!amplitude) {
                // TODO: Add required minimum version of @amplitude/analytics-browser
                config.loggerProvider.warn('File download tracking requires a later version of @amplitude/analytics-browser. File download events are not tracked.');
                return [2 /*return*/];
            }
            addFileDownloadListener = function (a) {
                try {
                    var url_1 = new URL(a.href);
                    var result = ext.exec(url_1.href);
                    var fileExtension_1 = result === null || result === void 0 ? void 0 : result[1];
                    if (fileExtension_1) {
                        a.addEventListener('click', function () {
                            if (fileExtension_1) {
                                amplitude.track(FILE_DOWNLOAD_EVENT, {
                                    file_extension: fileExtension_1,
                                    file_name: url_1.pathname,
                                    link_id: a.id,
                                    link_text: a.text,
                                    link_url: a.href,
                                });
                            }
                        });
                    }
                }
                catch (_a) {
                    config.loggerProvider.error("Something went wrong. File download events are not tracked for a#{a.id}");
                }
            };
            ext = /\.(pdf|xlsx?|docx?|txt|rtf|csv|exe|key|pp(s|t|tx)|7z|pkg|rar|gz|zip|avi|mov|mp4|mpe?g|wmv|midi?|mp3|wav|wma)$/;
            links = Array.from(document.getElementsByTagName('a'));
            links.forEach(addFileDownloadListener);
            // Adds listener to anchor tags added after initial load
            /* istanbul ignore else */
            if (typeof MutationObserver !== 'undefined') {
                observer = new MutationObserver(function (mutations) {
                    mutations.forEach(function (mutation) {
                        mutation.addedNodes.forEach(function (node) {
                            if (node.nodeName === 'A') {
                                addFileDownloadListener(node);
                            }
                        });
                    });
                });
                observer.observe(document.body, {
                    subtree: true,
                    childList: true,
                });
            }
            return [2 /*return*/];
        });
    }); };
    var execute = function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
        return [2 /*return*/, event];
    }); }); };
    return {
        name: name,
        type: type,
        setup: setup,
        execute: execute,
    };
};
exports.fileDownloadTracking = fileDownloadTracking;
//# sourceMappingURL=file-download-tracking.js.map