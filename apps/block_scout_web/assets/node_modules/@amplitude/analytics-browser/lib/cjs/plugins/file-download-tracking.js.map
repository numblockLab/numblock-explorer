{"version":3,"file":"file-download-tracking.js","sourceRoot":"","sources":["../../../src/plugins/file-download-tracking.ts"],"names":[],"mappings":"AAAA,iBA6EA;;;;AA7EA,8DAAgG;AAGhG,IAAM,mBAAmB,GAAG,eAAe,CAAC;AAErC,IAAM,oBAAoB,GAAG;IAClC,IAAM,IAAI,GAAG,sBAAsB,CAAC;IACpC,IAAM,IAAI,GAAG,4BAAU,CAAC,UAAU,CAAC;IACnC,IAAM,KAAK,GAAG,UAAO,MAAqB,EAAE,SAAyB;;;YACnE,wBAAwB;YACxB,IAAI,CAAC,SAAS,EAAE;gBACd,qEAAqE;gBACrE,MAAM,CAAC,cAAc,CAAC,IAAI,CACxB,wHAAwH,CACzH,CAAC;gBACF,sBAAO;aACR;YAEK,uBAAuB,GAAG,UAAC,CAAoB;gBACnD,IAAI;oBACF,IAAM,KAAG,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,KAAG,CAAC,IAAI,CAAC,CAAC;oBAClC,IAAM,eAAa,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,CAAC,CAAC,CAAC;oBAElC,IAAI,eAAa,EAAE;wBACjB,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE;4BAC1B,IAAI,eAAa,EAAE;gCACjB,SAAS,CAAC,KAAK,CAAC,mBAAmB,EAAE;oCACnC,cAAc,EAAE,eAAa;oCAC7B,SAAS,EAAE,KAAG,CAAC,QAAQ;oCACvB,OAAO,EAAE,CAAC,CAAC,EAAE;oCACb,SAAS,EAAE,CAAC,CAAC,IAAI;oCACjB,QAAQ,EAAE,CAAC,CAAC,IAAI;iCACjB,CAAC,CAAC;6BACJ;wBACH,CAAC,CAAC,CAAC;qBACJ;iBACF;gBAAC,WAAM;oBACN,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,yEAAyE,CAAC,CAAC;iBACxG;YACH,CAAC,CAAC;YAEI,GAAG,GACP,+GAA+G,CAAC;YAG5G,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;YAC7D,KAAK,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;YAEvC,wDAAwD;YACxD,0BAA0B;YAC1B,IAAI,OAAO,gBAAgB,KAAK,WAAW,EAAE;gBACrC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,UAAC,SAAS;oBAC9C,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;wBACzB,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,IAAI;4BAC/B,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,EAAE;gCACzB,uBAAuB,CAAC,IAAyB,CAAC,CAAC;6BACpD;wBACH,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBAEH,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE;oBAC9B,OAAO,EAAE,IAAI;oBACb,SAAS,EAAE,IAAI;iBAChB,CAAC,CAAC;aACJ;;;SACF,CAAC;IACF,IAAM,OAAO,GAAG,UAAO,KAAY;QAAK,sBAAA,KAAK,EAAA;aAAA,CAAC;IAE9C,OAAO;QACL,IAAI,MAAA;QACJ,IAAI,MAAA;QACJ,KAAK,OAAA;QACL,OAAO,SAAA;KACR,CAAC;AACJ,CAAC,CAAC;AAvEW,QAAA,oBAAoB,wBAuE/B","sourcesContent":["import { BrowserClient, PluginType, Event, EnrichmentPlugin } from '@amplitude/analytics-types';\nimport { BrowserConfig } from '../config';\n\nconst FILE_DOWNLOAD_EVENT = 'file_download';\n\nexport const fileDownloadTracking = (): EnrichmentPlugin => {\n  const name = 'fileDownloadTracking';\n  const type = PluginType.ENRICHMENT;\n  const setup = async (config: BrowserConfig, amplitude?: BrowserClient) => {\n    /* istanbul ignore if */\n    if (!amplitude) {\n      // TODO: Add required minimum version of @amplitude/analytics-browser\n      config.loggerProvider.warn(\n        'File download tracking requires a later version of @amplitude/analytics-browser. File download events are not tracked.',\n      );\n      return;\n    }\n\n    const addFileDownloadListener = (a: HTMLAnchorElement) => {\n      try {\n        const url = new URL(a.href);\n        const result = ext.exec(url.href);\n        const fileExtension = result?.[1];\n\n        if (fileExtension) {\n          a.addEventListener('click', () => {\n            if (fileExtension) {\n              amplitude.track(FILE_DOWNLOAD_EVENT, {\n                file_extension: fileExtension,\n                file_name: url.pathname,\n                link_id: a.id,\n                link_text: a.text,\n                link_url: a.href,\n              });\n            }\n          });\n        }\n      } catch {\n        config.loggerProvider.error(`Something went wrong. File download events are not tracked for a#{a.id}`);\n      }\n    };\n\n    const ext =\n      /\\.(pdf|xlsx?|docx?|txt|rtf|csv|exe|key|pp(s|t|tx)|7z|pkg|rar|gz|zip|avi|mov|mp4|mpe?g|wmv|midi?|mp3|wav|wma)$/;\n\n    // Adds listener to existing anchor tags\n    const links = Array.from(document.getElementsByTagName('a'));\n    links.forEach(addFileDownloadListener);\n\n    // Adds listener to anchor tags added after initial load\n    /* istanbul ignore else */\n    if (typeof MutationObserver !== 'undefined') {\n      const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeName === 'A') {\n              addFileDownloadListener(node as HTMLAnchorElement);\n            }\n          });\n        });\n      });\n\n      observer.observe(document.body, {\n        subtree: true,\n        childList: true,\n      });\n    }\n  };\n  const execute = async (event: Event) => event;\n\n  return {\n    name,\n    type,\n    setup,\n    execute,\n  };\n};\n"]}